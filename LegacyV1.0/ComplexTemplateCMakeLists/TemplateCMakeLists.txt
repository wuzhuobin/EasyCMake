# @file	TemplateCMakeLists.txt
# @brief	A template CMakeLists.txt which can automatically generate project
# @author	WUZHUOBIN
# @version	1.8.0
# @since	Dec.08.2017
# @date 	Apr.19.2018
# 
# <h1>How to use</h1>
# <ul>
#     <li>Create a folder to place all header files, implementation files and the 'TemplateCMakeLists.txt'.</li>
#     <li>Place 'Config.cmake.in' and 'CMakeListsConfig.cmake.in' properly. </li>
#     <li>Rename the folder as the project name. Since the folder name will become the project name.</li>
#     <li>Rename 'TemplateCMakeLists.txt' to 'CMakeLists.txt'.</li>
#     <li>Configure with CMake and follow normal cmake pipeline.</li>
#     <li>If build executable, create 'main/main.cpp' as the program entry point.</li>
#     <li>If build library, no need to do the previous procedure.</li>
#     <li>DO NOT modify things not in 'CHANGE BELOW'. </li>
#     <li>If need other Qt module, add modules in 'DEPENDENCY' module.</li>
#     <li>If need other package, add packages in 'DEPENDENCY' module.</li>
#     <li>If need resource, add resources in 'DEPENDENCY' module.</li>
#     <li>If need other libraries and headers, add them in <code>SYSTEM_LIBRARIES</code> and <code>SYSTEM_INCLUDE</code> in 'LIBRARIES' module. </li>
#     <li>If need build shared libraries, using export macro in header files and check <code>BUILD_SHARED_LIB</code> option. </li>
# </ul>
# <h1>What happen</h1>
# <ul>
#     <li>CMake will find all '*.c*' '*.h*' files for building. </li>
#     <li>CMake will find all '*.qrc' files as Qt qrc. </li>
#     <li>CMake will find all '*.ui' as Qt UI form. </li>
#     <li>If 'main/main.cpp' exists, the project will create both static library files and executable files. </li>
#     <li>CMake will export necessary files for CMake package and install.</li>
# </ul>
# 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#			Copyright (c) WUZHUOBIN 											    #
#			All rights reserved.												    #
#			See Copyright.txt													    #
#			This software is distributed WITHOUT ANY WARRANTY; without even		    #
#			the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR	    #
#			PURPOSE.  See the above copyright notice for more information.		    #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
cmake_minimum_required(VERSION 3.1) 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
get_filename_component(
	FOLDER_NAME 
	${CMAKE_CURRENT_SOURCE_DIR} 
	NAME
)
project(${FOLDER_NAME})

message(
	STATUS 
	"Building submodule ${PROJECT_NAME}..."
)

# multi-processor build
if(${MSVC})
	set(
		CMAKE_CXX_FLAGS 
		"${CMAKE_CXX_FLAGS} /MP"
	)
	set(
		CMAKE_C_FLAGS
		"${CMAKE_C_FLAGS} /MP"
	)
endif()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # POLICY  # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

# # # # # # # # # # # # # # # # # CHANGE BELOW  # # # # # # # # # # # # # # # # 


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # DEPENDENCY  # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

# Adding dependency library you need
# Please remember to set it to SYSTEM_LIBRARIES as well 

# ITK
find_package(ITK REQUIRED)
include(${ITK_USE_FILE})

# VTK
find_package(VTK REQUIRED) 
include(${VTK_USE_FILE})

# QT
find_package(Qt5Core REQUIRED)
find_package(Qt5Widgets REQUIRED)
# # # # # # # # # # # # # # # # # CHANGE BELOW  # # # # # # # # # # # # # # # # 
#find_package(Qt5.... REQUIRED)
#find_package(... REQURIED)

# OTHERS
#find_package()
#....

# WINDOWS RESOURCE
# set(
# 	WINDOWS_RESOURCE
# 	# PATH
# )



# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #  
# # # # # # # # # # # # # # # # # LIBRARIES # # # # # # # # # # # # # # # # # #  
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #  

# Allow the developer to select if Dynamic or Static libraries are built
option (BUILD_SHARED_LIBS "Build Shared Libraries" OFF)
# Set the LIB_TYPE variable to STATIC
set (LIB_TYPE STATIC)
if (BUILD_SHARED_LIBS)
	# User wants to build Dynamic Libraries, so change the LIB_TYPE variable to CMake keyword 'SHARED'
	set (LIB_TYPE SHARED)
endif (BUILD_SHARED_LIBS)

set(
	CMAKE_ARCHIVE_OUTPUT_DIRECTORY
	${CMAKE_BINARY_DIR}/lib
)

set(
	CMAKE_LIBRARY_OUTPUT_DIRECTORY
	${CMAKE_BINARY_DIR}/lib
)
set(
	CMAKE_RUNTIME_OUTPUT_DIRECTORY 
	${CMAKE_BINARY_DIR}/bin
)

link_directories(
	${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}
	${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
)

set(
	SYSTEM_LIBRARIES
	${VTK_LIBRARIES} 
	${ITK_LIBRARIES}
	Qt5::Core
	Qt5::Widgets
)

set(
	SYSTEM_INCLUDE
	${PROJECT_SOURCE_DIR}
)

# # # # # # # # # # # # # # # # # CHANGE BELOW  # # # # # # # # # # # # # # # # 
set(
	SYSTEM_LIBRARIES
	${SYSTEM_LIBRARIES}
	#OTHERS
	#...
	# opengl32
	# legacy_stdio_definitions
)

set(
	SYSTEM_INCLUDE
	${SYSTEM_INCLUDE}
	#....
)


# Enable always build static library
# set(LIB_TYPE STATIC)


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #  
# # # # # # # # # # # # # # # # # CODES # # # # # # # # # # # # # # # # # # # #  
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #  


# # # # # # # # # # # # # # # # # BUILD LIBRARY # # # # # # # # # # # # # # # #  
file(GLOB PROJECT_QRC *.qrc)
file(GLOB PROJECT_SRC *.c*)
file(GLOB PROJECT_INC *.h*)
file(GLOB PROJECT_UI *.ui)

# Output UI headers to specified location
qt5_wrap_ui(
	PROJECT_UI_H
	${PROJECT_UI}
)

qt5_wrap_cpp(
    PROJECT_MOC
    ${PROJECT_INC}
)

qt5_add_resources(
	PROJECT_QRC_SRC
	${PROJECT_QRC}
)

# Adding a prefix for exporting target
foreach(ONE_INCLUDE ${SYSTEM_INCLUDE})
	set(TEMPORARY_SYSTEM_INCLUDE ${TEMPORARY_SYSTEM_INCLUDE} $<BUILD_INTERFACE:${ONE_INCLUDE}>)
endforeach()

set(SYSTEM_INCLUDE ${TEMPORARY_SYSTEM_INCLUDE})

# Building library
if( NOT "${PROJECT_SRC}" STREQUAL "")

	add_library(
	    ${PROJECT_NAME}
		${LIB_TYPE}
	    ${PROJECT_SRC}
	    ${PROJECT_INC}
	    ${PROJECT_MOC}
		${PROJECT_UI}
		${PROJECT_UI_H}
		${PROJECT_QRC}
		${PROJECT_QRC_SRC}
	)

	include(GenerateExportHeader)
	generate_export_header(${PROJECT_NAME})

	target_link_libraries(
	    ${PROJECT_NAME}
		${SYSTEM_LIBRARIES}
	)

	message(
		STATUS
		"Linking Libraries\n"
		"${SYSTEM_LIBRARIES}"
	)

	target_include_directories(
		${PROJECT_NAME}
		PUBLIC
		$<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>
		${SYSTEM_INCLUDE}
		$<INSTALL_INTERFACE:include>  
	)

	message(
		STATUS
		"Include directory\n"
		"${SYSTEM_INCLUDE}"
		"$<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>"
	
	)
	

	# installation to be continue.
	# comment following for normal source project

	install(
		TARGETS ${PROJECT_NAME}
		EXPORT ${PROJECT_NAME} 
	    RUNTIME DESTINATION bin
	    LIBRARY DESTINATION lib
		ARCHIVE DESTINATION lib
		INCLUDES DESTINATION include
	)
	
	export(
		EXPORT
		${PROJECT_NAME}
		FILE
		${CMAKE_BINARY_DIR}/lib/cmake/${PROJECT_NAME}.cmake
	)

	configure_file(
		CMakeListsConfig.cmake.in
		${CMAKE_BINARY_DIR}/lib/cmake/${PROJECT_NAME}-config.cmake
		@ONLY
	)

	install(
		FILES 
		${PROJECT_BINARY_DIR}/${PROJECT_NAME}_export.h
		${PROJECT_INC}
		${PROJECT_UI_H}
		DESTINATION
		include
	)
	
	install(
		EXPORT ${PROJECT_NAME}
		DESTINATION lib/cmake
	)

	install(
		FILES
		${CMAKE_BINARY_DIR}/lib/cmake/${PROJECT_NAME}-config.cmake
		DESTINATION
		lib/cmake
	)
	
endif()

# # # # # # # # # # # # # # # # BUILD EXE # # # # # # # # # # # # # # # # # # #  
file(GLOB MAIN_PROJECT_QRC main/*.qrc)
file(GLOB MAIN_PROJECT_SRC main/*.c*)
file(GLOB MAIN_PROJECT_INC main/*.h*)
file(GLOB MAIN_PROJECT_UI main/*.ui)

# Output UI headers to specified location
qt5_wrap_ui(
	MAIN_PROJECT_UI_H
	${MAIN_PROJECT_UI}
)

qt5_wrap_cpp(
    MAIN_PROJECT_MOC
    ${MAIN_PROJECT_INC}
)

qt5_add_resources(
	MAIN_PROJECT_QRC_SRC
	${MAIN_PROJECT_QRC}
)

if( NOT "${MAIN_PROJECT_SRC}" STREQUAL "")

	if(NOT "${PROJECT_SRC}" STREQUAL "")

		add_executable(
			${PROJECT_NAME}_main
			${MAIN_PROJECT_SRC}
			${MAIN_PROJECT_MOC}
			${MAIN_PROJECT_INC}
			${MAIN_PROJECT_UI}
			${MAIN_PROJECT_UI_H}
			${MAIN_PROJECT_QRC}
			${MAIN_PROJECT_QRC_SRC}
			${WINDOWS_RESOURCE}

		)

		target_link_libraries(
			${PROJECT_NAME}_main
			${PROJECT_NAME}
		)

	else()

		add_executable(
			${PROJECT_NAME}_main
			${MAIN_PROJECT_SRC}
			${MAIN_PROJECT_MOC}
			${MAIN_PROJECT_INC}
			${MAIN_PROJECT_UI}
			${MAIN_PROJECT_UI_H}
			${MAIN_PROJECT_QRC}
			${MAIN_PROJECT_QRC_SRC}
			${PROJECT_QRC}
			${PROJECT_QRC_SRC}
			${WINDOWS_RESOURCE}
		)

		target_link_libraries(
			${PROJECT_NAME}_main
			${SYSTEM_LIBRARIES}
		)

		target_include_directories(
			${PROJECT_NAME}_main
			PUBLIC
			${PROJECT_BINARY_DIR}
			${SYSTEM_INCLUDE}
		)

	endif()

endif()


#Grouping in MSVC
source_group(
	"Generated Files"
	FILES
	${PROJECT_MOC}
	${PROJECT_UI_H}
	${MAIN_PROJECT_MOC}
	${MAIN_PROJECT_UI_H}
	${PROJECT_QRC_SRC}
	${MAIN_PROJECT_QRC_SRC}
)
source_group(
	"Forms Files"
	FILES
	${PROJECT_UI}
	${MAIN_PROJECT_UI}
)
source_group(
	"Header Files" 
	FILES 
	${PROJECT_INC}
	${MAIN_PROJECT_INC}
)
source_group(
	"Source Files" 
	FILES 
	${PROJECT_SRC}
	${MAIN_PROJECT_SRC}
)

MESSAGE(STATUS "Building submodule ${PROJECT_NAME} finished!")


